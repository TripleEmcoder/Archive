<?php
// $Id: insert_node.module,v 1.1.2.5 2009/04/13 22:02:47 alexiswilke Exp $
// Author: Mark Burton
// Conversion to D6: Alexis Wilke

/**
 * Implementation of hook_init().
 */
function insert_node_init() {
  // If you experience side effects, feel free to comment out this add.
  // All you lose is the coming back to the node including the comment.
  if (function_exists('jquery_plugin_add')) {
    jquery_plugin_add('cookie');
    drupal_add_js(drupal_get_path('module', 'insert_node') .'/back_from_comment.js');
  }
}

/**
 * Function used to replace the [node: ...] tags.
 */
function _insert_node_replacer($matches) {
  static $insert_node_count = 0;

  if (is_numeric($matches[1])) {
    $nid = $matches[1];
  }
  else {
    $path = explode("/", drupal_get_normal_path(rtrim(ltrim($matches[1], "/"), "/")));
    if ($path && ($path[0] == 'node') && is_numeric($path[1])) {
      $nid = $path[1];
    }
    else {
      return "<em>". t("Can't find !s to include!", array("!s" => $matches[1])) ."</em>";
    }
  }

  $node = node_load($nid);
  if ($nid && node_access('view', $node)) {
    // avoid recursivity
    if ($node_ids[$nid]) {
      return "<em>". t("Node #!nid is being inserted twice by InsertNode. Breaking the recursive loop here.", array('!nid' => $nid)) ."</em>";
    }
    $node_ids[$nid] = TRUE;

    $output = '';
    $comments = '';
    $fieldset = '';
    $params = split(' ', $matches[2]);
    for ($idx = 0; $idx < count($params); ++$idx) {
      switch ($params[$idx]) {
      case 'themed':
        $output .= theme('node', $node);
        break;

      case 'body':
        $output .= '<div class="insert-node-body">' . node_view($node, FALSE, TRUE, FALSE) . '</div>';
        break;

      case 'content':
        // node_view($node, $teaser = FALSE, $page = FALSE, $links = TRUE)
        $output .= '<div class="insert-node-content">' . node_view($node) . '</div>';
        break;

      case 'title':
        $output .= '<h3 class="insert-node-title">' . l($node->title, "node/$node->nid") . '</h3>';
        break;

      case 'teaser':
        $output .= '<div class="insert-node-teaser">' . node_view($node, TRUE, FALSE, FALSE) . '</div>';
        break;

      case 'more':
        $output .= '<div class="insert-node-more">' . l(t('Read more...'), "node/$node->nid") . '</div>';
        break;

      case 'link':
        $output .= l($node->title, "node/$node->nid");
        break;

      case 'collapsible':
      case 'collapsed':
        $fieldset = $params[$idx];
        break;

      case 'comments':
        // the comment module is optional
        if (module_exists('comment')) {
          // add the node comments; that function checks permissions
          $comments = comment_render($node);
        }
        else {
          $comments = "<em>". t("Can't find the 'comment' module! <a href=\"/admin/build/modules\">Was it selected</a>?") ."</em>";
        }
        break;

      }
    }
    if (!$output) {
      $output = node_view($node);
    }
    if ($comments) {
      $output .= '<div class="insert-node-comments">' . $comments . '</div>';
    }
    if ($fieldset) {
      // put the output inside a field set
      $output = theme('fieldset', array(
        '#collapsible' => TRUE,
        '#collapsed'   => $fieldset == 'collapsed',
        '#title'       => $node->title,
        '#value'       => $output));
    }
    ++$insert_node_count;
    $node_ids[$nid] = FALSE;
    return '<div class="insert-node insert-node' . $insert_node_count . '">' . $output . '</div>';
  }

  return '';
}


function insert_node_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
  case 'list':
    return array(0 => t('Insert node'));

  case 'description':
    return t('Insert the body, teaser, title, comments of a node defined by its ID or URL name');

  case 'prepare':
    return $text;

  case 'no cache':
    return TRUE;

  case "process":
    return preg_replace_callback('/\[node:([^\s\]]+)((?:\s+(?:themed|title|body|content|teaser|more|link|collapsible|collapsed|comments))*)\]/', '_insert_node_replacer', $text);

  }
}


function insert_node_filter_tips($delta, $format, $long = false) {
  return t('[node:123 <em>parameters</em>] - insert a node content<br/>'
    . 'themed - insert themed node<br/>'
    . 'content, body or teaser - insert node\'s content, body or teaser<br/>'
    . 'link or more - insert link to node with title or "Read more..."<br/>'
    . 'collapsed or collapsible - display the selection collapsible and eventually collapsed<br/>'
    . 'comments - insert node comments');
}

